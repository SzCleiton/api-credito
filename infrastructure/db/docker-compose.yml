version: '3.8'

services:
  postgres-db:
    image: postgres:14-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: creditosdb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d creditosdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    networks:
      - app-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on: [zookeeper]
    ports: ["9092:9092"]
    networks: [app-network]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  credito-api:
    build:
      context: ../backend/services/credito-api
      dockerfile: Dockerfile
    container_name: credito-api
    depends_on:
      postgres-db: { condition: service_healthy }
      kafka: { condition: service_started }
    ports: ["8080:8080"]
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/creditosdb
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_SQL_INIT_MODE=never
    networks: [app-network]

  credito-ui:
    build:
      context: ../frontend/apps/credito-ui
      dockerfile: Dockerfile
    container_name: credito-ui
    depends_on: [credito-api]
    ports: ["4200:80"]
    networks: [app-network]

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
